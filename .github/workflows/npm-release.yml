name: NPM Release

on:
  release:
    types: [published]

# Add permissions to allow pushing to the repository
permissions:
  contents: write
  pull-requests: write

jobs:
  npm-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          # Use special token format for push permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version from GitHub Release
        run: |
          # Get version from GitHub Release (v0.1.0 -> 0.1.0)
          RELEASE_VERSION=${{ github.event.release.tag_name }}
          RELEASE_VERSION="${RELEASE_VERSION#v}"
          
          # Update package.json version directly (without using npm command)
          npm version $RELEASE_VERSION --no-git-tag-version
          
          echo "Updated version to $RELEASE_VERSION"
      
      - name: Create and merge PR for version update
        id: create_pr
        run: |
          # Create a branch for version update
          VERSION=${{ github.event.release.tag_name }}
          BRANCH="version-update-${VERSION}"
          git checkout -b $BRANCH
          
          # Commit changes and push to the new branch
          git add package.json
          git commit -m "chore: update version to ${VERSION}"
          
          # Use authentication with token
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin $BRANCH
          
          # Create PR without --json flag
          PR_URL=$(gh pr create --base main --head $BRANCH \
            --title "chore: version update ${VERSION}" \
            --body "This PR updates the package.json version following the GitHub Release publication.")
          
          echo "PR created: ${PR_URL}"
          
          # Self-approve the PR to meet approval requirements
          gh pr review ${PR_URL} --approve -b "Auto-approved by GitHub Actions"
          
          # Enable auto-merge and execute
          gh pr merge ${PR_URL} --auto --merge
          
          # Debug: Show PR status output for troubleshooting
          echo "Initial PR status:"
          gh pr view ${PR_URL}
          
          # Wait for PR to be merged
          MAX_ATTEMPTS=60
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # Check PR status using more flexible pattern matching
            PR_OUTPUT=$(gh pr view ${PR_URL})
            echo "PR status (attempt $ATTEMPT):"
            echo "$PR_OUTPUT" | head -3
            
            # Check for merged status - trying different patterns
            if echo "$PR_OUTPUT" | grep -i -E "merged|was merged|has been merged" > /dev/null; then
              echo "PR has been merged successfully"
              break
            elif echo "$PR_OUTPUT" | grep -i -E "closed|was closed" > /dev/null; then
              echo "PR was closed without merging"
              exit 1
            fi
            
            echo "Waiting for PR to be merged... (attempt $ATTEMPT/$MAX_ATTEMPTS)"
            ATTEMPT=$((ATTEMPT+1))
            sleep 5
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Timeout waiting for PR to merge"
            exit 1
          fi
          
          # Get the latest main branch
          git checkout main
          git pull origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and publish npm package
        run: |
          npm run build
          npm run test
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 